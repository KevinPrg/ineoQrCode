{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/psycho/Documents/ineoQrCode/ineoqrcode/src/Components/QrCode.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport QRCode from 'qrcode.react';\nimport InputData from './InputData';\nimport { DataContext } from '../Context/DataContext';\n\nconst QrCode = () => {\n  _s();\n\n  const context = useContext(DataContext);\n  const [showInputs, setShowInputs] = useState(false);\n  const [show, setShow] = useState(false);\n  const [numberInput, setNumberInput] = useState(0);\n  const [mapGenerateInput, setMapGenerateInput] = useState(null);\n  const [qrValue, setQrValue] = useState(\"\");\n  let generateInputs = [];\n\n  const result = () => {\n    setShow(!show);\n    const finalResult = [];\n    let increment = 1;\n\n    for (let i = 0; i < context.result.length; i++) {\n      finalResult.push(` [Données ${increment}: \\n Numéro de chambre: ${context.result[i].data1} \\n Code INSEE: ${context.result[i].data2} \\n Numéro de poteau: ${context.result[i].data3}] \\n\\n`);\n      increment += 1;\n    }\n\n    setQrValue(finalResult.join(''));\n  };\n\n  const handleChange = e => {\n    setNumberInput(e.target.value);\n  };\n\n  const tables = async () => {\n    generateInputs = [];\n\n    for (let i = 0; i < numberInput; i++) {\n      generateInputs.push( /*#__PURE__*/_jsxDEV(InputData, {\n        index: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 27\n      }, this));\n    }\n\n    setShowInputs(!showInputs);\n    setMapGenerateInput(generateInputs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"nombre de champs: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: numberInput,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => tables(),\n      children: \"valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 79\n    }, this), showInputs === true && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: mapGenerateInput.map((layoutInput, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: layoutInput\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 92\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => result(),\n      children: \"g\\xE9n\\xE9rer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), show === true && /*#__PURE__*/_jsxDEV(QRCode, {\n      value: qrValue,\n      size: 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QrCode, \"Lrp5ktTefSn1wqazJDD38SYJriI=\");\n\n_c = QrCode;\nexport default QrCode;\n\nvar _c;\n\n$RefreshReg$(_c, \"QrCode\");","map":{"version":3,"sources":["/home/psycho/Documents/ineoQrCode/ineoqrcode/src/Components/QrCode.js"],"names":["React","useState","useContext","QRCode","InputData","DataContext","QrCode","context","showInputs","setShowInputs","show","setShow","numberInput","setNumberInput","mapGenerateInput","setMapGenerateInput","qrValue","setQrValue","generateInputs","result","finalResult","increment","i","length","push","data1","data2","data3","join","handleChange","e","target","value","tables","map","layoutInput","index"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport QRCode from 'qrcode.react';\n\nimport InputData from './InputData'\n\nimport { DataContext } from '../Context/DataContext'\n\nconst QrCode = () => {\n\n  const context = useContext(DataContext)\n\n  const [showInputs, setShowInputs] = useState(false)\n  const [show, setShow] = useState(false)\n  const [numberInput, setNumberInput] = useState(0)\n  const [mapGenerateInput, setMapGenerateInput] = useState(null)\n  const [qrValue, setQrValue] = useState(\"\")\n  let generateInputs = []\n\n  const result = () => {\n    setShow(!show)\n    const finalResult = []\n    let increment = 1\n    for (let i = 0; i < context.result.length; i++) {\n      finalResult.push(` [Données ${increment}: \\n Numéro de chambre: ${context.result[i].data1} \\n Code INSEE: ${context.result[i].data2} \\n Numéro de poteau: ${context.result[i].data3}] \\n\\n`)\n      increment += 1\n    }\n    setQrValue(finalResult.join(''))\n  }\n\n  const handleChange = (e) => {\n    setNumberInput(e.target.value)\n  }\n\n  const tables = async () => {\n    generateInputs = []\n    for (let i = 0; i < numberInput; i++) {\n      generateInputs.push(<InputData index={i} />)\n    }\n    setShowInputs(!showInputs)\n    setMapGenerateInput(generateInputs)\n  }\n\n  return (\n    <div>\n\n      nombre de champs: <input value={numberInput} onChange={handleChange} /> <button onClick={() => tables()} >valider</button>\n\n      {showInputs === true && <div>{mapGenerateInput.map((layoutInput, index) => { return (<div key={index}>{layoutInput}</div>) })}</div>}\n\n      <button onClick={() => result()} >générer</button>\n      {show === true &&\n        <QRCode value={qrValue} size={200} />\n      }\n    </div>\n  )\n}\n\nexport default QrCode\n"]},"metadata":{},"sourceType":"module"}