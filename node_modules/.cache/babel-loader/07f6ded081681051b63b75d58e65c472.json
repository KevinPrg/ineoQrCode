{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/psycho/Documents/ineoQrCode/ineoqrcode/src/Components/QrCode.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport QRCode from 'qrcode.react';\nimport InputData from './InputData';\nimport { DataContext } from '../Context/DataContext';\n\nconst QrCode = () => {\n  _s();\n\n  const [showInputs, setShowInputs] = useState(false);\n  const [show, setShow] = useState(false);\n  const [concat, setConcat] = useState(null);\n  const [numberInput, setNumberInput] = useState(0);\n  let tests = [];\n  const [valor, setValor] = useState(null);\n  const context = useContext(DataContext);\n\n  const result = () => {\n    setShow(!show);\n    const finalResult = context.result.map(info => info.data1, info.data2, info.data3).join(' , ');\n    console.log(finalResult);\n  };\n\n  const handleChange = e => {\n    setNumberInput(e.target.value);\n  };\n\n  const tables = async () => {\n    tests = [];\n\n    for (let i = 0; i < numberInput; i++) {\n      tests.push( /*#__PURE__*/_jsxDEV(InputData, {\n        index: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this));\n    }\n\n    setShowInputs(!showInputs);\n    setValor(tests);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"nombre de champs: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: numberInput,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => tables(),\n      children: \"valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 79\n    }, this), showInputs === true && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: valor.map((bloc, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: bloc\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 74\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => result(),\n      children: \"g\\xE9n\\xE9rer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), show === true && /*#__PURE__*/_jsxDEV(QRCode, {\n      value: concat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QrCode, \"2lNDd4HD7YzJzV/CT96rQ9CKXEA=\");\n\n_c = QrCode;\nexport default QrCode;\n\nvar _c;\n\n$RefreshReg$(_c, \"QrCode\");","map":{"version":3,"sources":["/home/psycho/Documents/ineoQrCode/ineoqrcode/src/Components/QrCode.js"],"names":["React","useState","useContext","QRCode","InputData","DataContext","QrCode","showInputs","setShowInputs","show","setShow","concat","setConcat","numberInput","setNumberInput","tests","valor","setValor","context","result","finalResult","map","info","data1","data2","data3","join","console","log","handleChange","e","target","value","tables","i","push","bloc","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIc,KAAK,GAAG,EAAZ;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMiB,OAAO,GAAGhB,UAAU,CAACG,WAAD,CAA1B;;AAGA,QAAMc,MAAM,GAAG,MAAM;AACnBT,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACA,UAAMW,WAAW,GAAGF,OAAO,CAACC,MAAR,CAAeE,GAAf,CAAmBC,IAAI,IAAIA,IAAI,CAACC,KAAhC,EAAuCD,IAAI,CAACE,KAA5C,EAAmDF,IAAI,CAACG,KAAxD,EAA+DC,IAA/D,CAAoE,KAApE,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ;AACD,GAJD;;AAMA,QAAMS,YAAY,GAAIC,CAAD,IAAO;AAC1BhB,IAAAA,cAAc,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAG,YAAY;AACzBlB,IAAAA,KAAK,GAAG,EAAR;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,WAApB,EAAiCqB,CAAC,EAAlC,EAAsC;AACpCnB,MAAAA,KAAK,CAACoB,IAAN,eAAW,QAAC,SAAD;AAAW,QAAA,KAAK,EAAED;AAAlB;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;;AACD1B,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAU,IAAAA,QAAQ,CAACF,KAAD,CAAR;AACD,GAPD;;AASA,sBACE;AAAA,kDAEoB;AAAO,MAAA,KAAK,EAAEF,WAAd;AAA2B,MAAA,QAAQ,EAAEgB;AAArC;AAAA;AAAA;AAAA;AAAA,YAFpB,oBAE0E;AAAQ,MAAA,OAAO,EAAE,MAAMI,MAAM,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF1E,EAIG1B,UAAU,KAAK,IAAf,iBAAuB;AAAA,gBAAMS,KAAK,CAACK,GAAN,CAAU,CAACe,IAAD,EAAOC,KAAP,KAAiB;AAAE,4BAAQ;AAAA,oBAAkBD;AAAlB,WAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,gBAAR;AAAwC,OAArE;AAAN;AAAA;AAAA;AAAA;AAAA,YAJ1B,eAME;AAAQ,MAAA,OAAO,EAAE,MAAMlB,MAAM,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,EAOGV,IAAI,KAAK,IAAT,iBACC,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEE;AAAf;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5CD;;GAAML,M;;KAAAA,M;AA8CN,eAAeA,MAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport QRCode from 'qrcode.react';\n\nimport InputData from './InputData'\n\nimport { DataContext } from '../Context/DataContext'\n\nconst QrCode = () => {\n\n  const [showInputs, setShowInputs] = useState(false)\n  const [show, setShow] = useState(false)\n  const [concat, setConcat] = useState(null)\n  const [numberInput, setNumberInput] = useState(0)\n  let tests = []\n  const [valor, setValor] = useState(null)\n\n  const context = useContext(DataContext)\n\n\n  const result = () => {\n    setShow(!show)\n    const finalResult = context.result.map(info => info.data1, info.data2, info.data3).join(' , ')\n    console.log(finalResult)\n  }\n\n  const handleChange = (e) => {\n    setNumberInput(e.target.value)\n  }\n\n  const tables = async () => {\n    tests = []\n    for (let i = 0; i < numberInput; i++) {\n      tests.push(<InputData index={i} />)\n    }\n    setShowInputs(!showInputs)\n    setValor(tests)\n  }\n\n  return (\n    <div>\n\n      nombre de champs: <input value={numberInput} onChange={handleChange} /> <button onClick={() => tables()} >valider</button>\n\n      {showInputs === true && <div>{valor.map((bloc, index) => { return (<div key={index}>{bloc}</div>) })}</div>}\n\n      <button onClick={() => result()} >générer</button>\n      {show === true &&\n        <QRCode value={concat} />\n      }\n    </div>\n  )\n}\n\nexport default QrCode\n"]},"metadata":{},"sourceType":"module"}